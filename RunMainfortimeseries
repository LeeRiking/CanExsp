doc = 'LIBSVM1';
doc_name = 'lin';
DirPath = sprintf('./AutoResult/%s/%s/',doc,doc_name);
if ~exist(DirPath,'dir'),mkdir(DirPath);end
for RunTimes = 1:1 %程序总共跑的次数，自定义
    FilePath = sprintf('%s%s%d.txt',DirPath,doc,RunTimes);
    fid = fopen(FilePath, 'wt');
    fprintf(fid, '%s Experment Time is %s \n', doc,date);
    DataNum = 1;

%   DataPath(1) = {'.\DJIA.mat'};                            
%   DataPath(1) = {'.\Exchange_rate.mat'};
%   DataPath(1) = {'.\Finance_news.mat'};

     %程序运行   
    for i = 1:DataNum
        fprintf(fid,'i=%d Runing DataPath:%s\n',i, DataPath{i});
        fprintf('Runing DataPath:%s\n',DataPath{i});
        load([DataPath{i}]);
% % % % %         feature selection          %%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         X(:,[5:36])=[];
%         XX = X;%%避免循环后X部分特征不见。
%         for del_feature = 5:46
%              OX = XX;
%              OX(:,del_feature)=[];
%              X = OX;
%          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  
%%人工智能股票数据v
% load './Data\AI\SDT.mat' X Y                              %3982     35    ♂1991 ♀1991
% load './Data\AI\ZGCC.mat' X Y                              %4877    35    ♂2393 ♀2484
% load './Data\AI\ZLZK.mat' X Y                              %4257     35%    ♂2058 ♀2199
% load './Data\AI\SZ50.mat' X Y                              %4877    35    ♂2393 ♀2484
% load './Data\AI\hs300.mat' X Y                              %3396   36    ♂2393  ♀2484

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%数据格式转化
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% load './Data/Image/Coil20_32.mat' o1 o2 o7
% Data.Type = 1;Data.A = o1;Data.B =[o2;o7];
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%数据预处理
% X=double(X);%%%把UNIT8数据变成double型
X=mapminmax(X',0,1)';%%%%数 据标准化
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  proporition = 0.99;
% % 主成分分析
% [coeff,~,latent] = pca(X);    %coeff每列为特征向量，latent为对应特征值
% % 计算累计贡献度，确认维度
% sum_latent = cumsum(latent/sum(latent));  % 累计贡献率
% dimension = find(sum_latent>=proporition);
% dimension = dimension(1);
%  
% % 降维
% X = X*coeff(:,1:dimension);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% X=X(:,[2 3 4 7 8 ]);

% Data.Type = 2;Data.X = X;Data.Y = Y;  
% DataTest.Type = 2;DataTest.X = X;DataTest.Y = Y;  
 
% clear X Y; 
% Data = DataTypeTrans(Data,2);

%%
d=60;%%%移动数据集的步长，针对数据集远大于训练集
[sample,~] = size(X);
n = floor((sample-290)/d);%%%向下取整函数，n-移动次数据集
n = 1;
index = zeros(3,1); 
index(1) = 60;  %测试集长 度				
k = 1;%%%每个最 优 参数意义 下可预测多少点
KK = floor(index(1)/k);%%%%%移动多少  次窗口（测试集/k）
%%各参数数量（画图用）
c_time=zeros(n*KK,1);
Train_acc = zeros(n*KK,1);
Test_acc = zeros(n,1);
Test_gmean = zeros(n,1);
Data.X1 = X; 
Data.Y1 = Y;
              for m=1:n
            %%选取年份数据      
                X = Data.X1(1+d*(m-1):538+d*(m-1),:);   
                Y = Data.Y1(1+d*(m-1):538+d*(m-1),:);
                [sample_0,~] = size(X);
                Ne = length(find(Y == 1)); 
                Po = length(find(Y == -1));		
                index(2) = 60;  %验证集长度		
                index(3) = sample_0-index(1)-index(2);   %训练集长度
                YY = zeros(index(1),1);
                DataFTest.X = X((sample_0-index(1))+1:sample_0,:);
                DataFTest.Y = Y((sample_0-index(1))+1:sample_0);
                   for j = 0:(KK-1) %%%KK-1 
            %静态预测									
            % Trn = index(3)+index(2);
            % Data.Type = 2;
            % Data.X = X(1:Trn,:);
            % Data.Y = Y(1:Trn,:); 
            % DataTest.X = X((1+Trn):(index(3)+Trn),:);
            % DataTest.Y = Y((1+Trn):(index(3)+Trn),:);
            %%动态预测
                    Trn = index(3)+index(2);%%训练集+验证集
                    Data.Type = 2;
                    Data.X = X((1+j*k):(Trn+j*k),:);
                    Data.Y = Y((1+j*k):(Trn+j*k),:); 
            %%
            %%%%参数配置区域 自定义区域
                    SVMFun = @LIBSVC;
                    FunPara.p1 = 0;
                    FunPara.pnum = 1;
            %Setting 'lin' means 线性；‘rbf’非线性，非线性需要设置参数FunPara.kerfPara.pars
                    FunPara.kerfPara.type = 'rbf';
                    FunPara.kerfPara.pars = 1;


            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %grid search
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    [FunPara,Best_AC] = MVNoKfoldParaSearch(Data,SVMFun,FunPara,index,k);
                    Train_acc((m-1)*KK+j+1) = Best_AC;    %20(m-1)+(j+1)
                    c_time((m-1)*KK+j+1) = FunPara.c;
            %%样本外数据预测

                    Perform.Sen = 0;Perform.Spe = 0;Perform.gmean = 0;
                    Perform.Acc = 0;
%%
                %%一个参数预测一个点
%                    for i_i = 1:1:k
%                     DataTrain.X = X((index(2)+i_i+j*k):(Trn+i_i-1+j*k),:);
%                     DataTrain.Y = Y((index(2)+i_i+j*k):(Trn+i_i-1+j*k),:);
%                 % % % 
%                     DataTest.X = X((Trn+i_i+j*k),:);%%测试集
%                     DataTest.Y = Y((Trn+i_i+j*k),:);%%测试集
%                       PredictY=SVMFun(DataTest.X,DataTrain,FunPara);
                  %统计准确分类值
%                     sum(DataTest.Y == PredictY);
%                 end             
%                   %统计预测结果
%                     YY((1+j*k):((j+1)*k),:) = PredictY;
%%
                %%一个参数预测k个点

                    DataTrain.X = X((index(2)+1+j*k):(Trn+j*k),:);
                    DataTrain.Y = Y((index(2)+1+j*k):(Trn+j*k),:);
                    DataTest.X = X((Trn+j*k+1):(Trn+k*(j+1)),:);%%测试集
                    DataTest.Y = Y((Trn+j*k+1):(Trn+k*(j+1)),:);%%测试集
                    PredictY=SVMFun(DataTest.X,DataTrain,FunPara);          
                  %统计预测结果
                    YY((1+j*k):((j+1)*k),:) = PredictY;
                  end
                AC = 100*sum(DataFTest.Y == YY)/length(DataFTest.Y);
                Test_acc(m) = AC;
                FP = sum(YY(DataFTest.Y==-1)==1);   %假正
                FN = sum(YY(DataFTest.Y==1)==-1);   %假负
                TP = sum(YY(DataFTest.Y==1)==1);    %真正
                TN = sum(YY(DataFTest.Y==-1)==-1);  %真负
                TFP = sum(DataFTest.Y==1);                 %实际为正=真正+假负=TP+FN
                TFN = sum(DataFTest.Y==-1);                %实际为负=真负+假正=TN+FP
                if TFP==0,Sen = 0;else Sen = 100*TP/TFP;end
                if TFN==0,Spe = 0;else Spe = 100*TN/TFN;end
                gmean =  sqrt(Sen*Spe);
                Test_gmean(m) = gmean;
                %% 
                 fprintf('mAC:%f,sAC:%f,mSen:%f,sSen:%f,mSpe:%f,sSpe:%f,mGmean:%f,sGmean:%f\n',...
                    mean(AC), std(AC),mean(Sen), std(Sen),mean(Spe), std(Spe),mean(gmean), std(gmean));
            
             end
            %%画图
        subplot(4,1,1),plot(Test_acc),title('Test\_acc');
        subplot(4,1,2),plot(Train_acc),title('Train\_acc');
        subplot(4,1,3),plot(Test_gmean),title('Test\_gmean');
        subplot(4,1,4),plot(c_time),title('c')
       
        %%保存图片
%         saveas(gcf,['.\AutoResult/LIBSVM1/lin/','Data',num2str(i),'.jpg']);
%         fprintf(fid,'c_time:%f\n',c_time);
        %%存储训练过程数据
%         AACC = zeros(35,1);
%         AACC(del_feature-4,1) = Test_acc;  
%         AACC(del_feature-4,1) = Test_gmean;  
%         foutput_1 = [c_time,Train_acc];
%         [lenth_1,~] =size(c_time);
%             for fp = 1:lenth_1
%                 fprintf(fid,'c_time:%f,Train_acc:%f',...
%                     foutput_1(fp,1),foutput_1(fp,2));
%             end
%             foutput_2 = [Test_acc,Test_gmean];
%             [lenth2,~] =size(Test_acc);
%             for fp = 1:lenth2
%                 fprintf(fid,'Test_acc:%f,Test_gmean:%f\n',... 
%                     foutput_2(fp,1),foutput_2(fp,2));
%             end
        fprintf(fid,'mTest_acc:%f,sTest_acc:%f,mTrain_acc:%f,sTrain_acc:%f,mTest_gmean:%f,sTest_gmean:%f\n\n',...
        mean(Test_acc), std(Test_acc),mean(Train_acc),std(Train_acc),mean(Test_gmean), std(Test_gmean));
%           fprintf(fid,'del_feature:%f,mTest_acc:%f,sTest_acc:%f,mTest_gmean:%f,sTest_gmean:%f\n',... 
%               del_feature,mean(Test_acc),std(Test_acc),mean(Test_gmean),std(Test_gmean));
%         end
     fclose(fid);
    end
end
load train;
sound(y,Fs);



